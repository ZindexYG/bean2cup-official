---
import { getCollection } from 'astro:content'
import Layout from '@layouts/Layout.astro'
import Container from '@components/container.astro'
import Sectionhead from '@components/sectionhead.astro'
import EventsRecent from '@components/events/EventsRecent.astro'
import EventsPast from '@components/events/EventsPast.astro'
// 导入事件日志数据
import eventLogsData from 'content/eventLogs.json'

// 获取所有已发布的活动
const allEvents = await getCollection(
  'articles',
  ({ data }) => !data.draft && data.publishDate < new Date(),
)

// 按发布日期从新到旧排序
const sortedEvents = allEvents.sort(
  (a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime()
)

// 为活动按月份分组
const eventsByMonth = sortedEvents.reduce((groups, event) => {
  const date = event.data.publishDate
  const monthYear = `${date.getFullYear()}年${date.getMonth() + 1}月`

  if (!groups[monthYear]) {
    groups[monthYear] = []
  }

  groups[monthYear].push(event)
  return groups
}, {})

// 按照月份排序（从新到旧）
const sortedMonths = Object.keys(eventsByMonth).sort((a, b) => {
  const [yearA, monthA] = a.split('年')
  const [yearB, monthB] = b.split('年')
  return Number(yearB) - Number(yearA) || Number(monthB.replace('月', '')) - Number(monthA.replace('月', ''))
})

// 初始显示最新的3个月份
const initialMonthsCount = Math.min(3, sortedMonths.length)
const initialMonths = sortedMonths.slice(0, initialMonthsCount)
const hasMoreMonths = sortedMonths.length > initialMonthsCount

// 处理事件日志数据 - 按年份分组
const eventLogs = eventLogsData.slides.sort((a, b) => {
  const dateA = new Date(a.date);
  const dateB = new Date(b.date);
  return dateB.getTime() - dateA.getTime(); // 从新到旧排序
});

// 按年份分组
const eventLogsByYear = eventLogs.reduce((groups, event) => {
  const year = new Date(event.date).getFullYear();
  if (!groups[year]) {
    groups[year] = [];
  }
  groups[year].push(event);
  return groups;
}, {});

// 获取年份并排序（从新到旧）
const sortedYears = Object.keys(eventLogsByYear).sort((a, b) => Number(b) - Number(a));
---

<Layout title='活动讯息'>
  <Container class='max-w-[1600px]'>
    <Sectionhead>
      <Fragment slot='title'>活动讯息</Fragment>
      <Fragment slot='desc'>我们的最新活动与讯息，欢迎报名参与。</Fragment>
    </Sectionhead>

    <!-- 标签切换 -->
    <div class='mt-8 border-b border-gray-200'>
      <nav class='flex' aria-label='Tabs'>
        <button
          id="tab-recent"
          class='flex-1 tab-button active'
          data-tab='recent'
          aria-selected="true"
          role="tab"
          aria-controls="panel-recent"
        >
          活动讯息
        </button>
        <button
          id="tab-past"
          class='flex-1 tab-button'
          data-tab='past'
          aria-selected="false"
          role="tab"
          aria-controls="panel-past"
        >
          活动记录
        </button>
      </nav>
    </div>

    <!-- 内容区域 -->
    <div class='mt-8'>
      <!-- 活动讯息内容面板 -->
      <div id="panel-recent" role="tabpanel" aria-labelledby="tab-recent" class="tab-panel active">
        <EventsRecent
          initialMonths={initialMonths}
          eventsByMonth={eventsByMonth}
          hasMoreMonths={hasMoreMonths}
          initialMonthsCount={initialMonthsCount}
          sortedMonths={sortedMonths}
        />
      </div>

      <!-- 活动记录内容面板 -->
      <div id="panel-past" role="tabpanel" aria-labelledby="tab-past" class="tab-panel hidden">
        <EventsPast
          sortedYears={sortedYears}
          eventLogsByYear={eventLogsByYear}
        />
      </div>
    </div>
  </Container>
</Layout>

<style>
  .tab-button {
    @apply py-4 px-1 text-center border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300;
    transition: all 0.2s ease-in-out;
  }
  .tab-button.active {
    @apply border-blue-500 text-blue-600;
  }
  .tab-panel {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    transition: opacity 0.3s ease-in-out, max-height 0.3s ease-in-out;
  }
  .tab-panel.active {
    opacity: 1;
    max-height: 9999px; /* 一个足够大的值 */
  }
  .tab-panel.hidden {
    display: none;
  }
  .lazy-image-container {
    min-height: 100px;
    background-color: #f3f4f6;
  }
</style>

<script>
  // 标签切换逻辑
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('[role="tab"]');
    const tabPanels = document.querySelectorAll('[role="tabpanel"]');

    // 初始状态设置
    function setInitialState() {
      // 默认显示第一个标签页
      tabButtons[0].classList.add('active');
      tabButtons[0].setAttribute('aria-selected', 'true');
      tabPanels[0].classList.add('active');
      tabPanels[0].classList.remove('hidden');

      // 隐藏其他标签页
      for(let i = 1; i < tabPanels.length; i++) {
        tabPanels[i].classList.add('hidden');
        tabPanels[i].classList.remove('active');
        tabButtons[i].classList.remove('active');
        tabButtons[i].setAttribute('aria-selected', 'false');
      }
    }

    // 设置标签切换事件
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('aria-controls');
        const tabPanel = document.getElementById(tabId);

        if (!tabPanel) return;

        // 更新按钮状态
        tabButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.setAttribute('aria-selected', 'false');
        });
        button.classList.add('active');
        button.setAttribute('aria-selected', 'true');

        // 先将所有面板标记为隐藏
        tabPanels.forEach(panel => {
          panel.classList.add('hidden');
          panel.classList.remove('active');
        });

        // 然后显示当前面板（使用延迟以支持过渡效果）
        setTimeout(() => {
          tabPanel.classList.remove('hidden');
          // 这里用 setTimeout 允许 DOM 更新后再添加 active 类，使过渡效果更流畅
          setTimeout(() => {
            tabPanel.classList.add('active');
          }, 10);
        }, 50);
      });
    });

    // 支持键盘导航
    tabButtons.forEach((button, index) => {
      button.addEventListener('keydown', (e) => {
        // 左右箭头键导航
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
          e.preventDefault();
          const direction = e.key === 'ArrowLeft' ? -1 : 1;
          const targetIndex = (index + direction + tabButtons.length) % tabButtons.length;
          tabButtons[targetIndex].focus();
          tabButtons[targetIndex].click();
        }
        // 按下回车或空格激活标签
        else if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          button.click();
        }
      });
    });

    // 检查 URL 参数是否指定了标签
    const params = new URLSearchParams(window.location.search);
    const tabParam = params.get('tab');

    if (tabParam) {
      const targetTab = document.querySelector(`[data-tab="${tabParam}"]`);
      if (targetTab) {
        targetTab.click();
      } else {
        setInitialState();
      }
    } else {
      setInitialState();
    }
  });
</script>
