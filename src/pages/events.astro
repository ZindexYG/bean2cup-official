---
import { getCollection } from 'astro:content'
import { Picture } from 'astro:assets'
import Layout from '@layouts/Layout.astro'
import Container from '@components/container.astro'
import Sectionhead from '@components/sectionhead.astro'
// 导入事件日志数据
import eventLogsData from '../content/eventLogs.json'

// 获取所有已发布的活动
const allEvents = await getCollection(
  'articles',
  ({ data }) => !data.draft && data.publishDate < new Date(),
)

// 按发布日期从新到旧排序
const sortedEvents = allEvents.sort(
  (a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime()
)

// 为活动按月份分组
const eventsByMonth = sortedEvents.reduce((groups, event) => {
  const date = event.data.publishDate
  const monthYear = `${date.getFullYear()}年${date.getMonth() + 1}月`

  if (!groups[monthYear]) {
    groups[monthYear] = []
  }

  groups[monthYear].push(event)
  return groups
}, {})

// 按照月份排序（从新到旧）
const sortedMonths = Object.keys(eventsByMonth).sort((a, b) => {
  const [yearA, monthA] = a.split('年')
  const [yearB, monthB] = b.split('年')
  return Number(yearB) - Number(yearA) || Number(monthB.replace('月', '')) - Number(monthA.replace('月', ''))
})

// 将服务器端数据序列化为JSON字符串，供客户端JavaScript使用
const sortedMonthsJSON = JSON.stringify(sortedMonths)
const eventsByMonthJSON = JSON.stringify(eventsByMonth)

// 初始显示最新的3个月份
const initialMonthsCount = Math.min(3, sortedMonths.length)
const initialMonths = sortedMonths.slice(0, initialMonthsCount)
const hasMoreMonths = sortedMonths.length > initialMonthsCount

// 处理事件日志数据 - 按年份分组
const eventLogs = eventLogsData.slides.sort((a, b) => {
  const dateA = new Date(a.date);
  const dateB = new Date(b.date);
  return dateB - dateA; // 从新到旧排序
});

// 按年份分组
const eventLogsByYear = eventLogs.reduce((groups, event) => {
  const year = new Date(event.date).getFullYear();
  if (!groups[year]) {
    groups[year] = [];
  }
  groups[year].push(event);
  return groups;
}, {});

// 获取年份并排序（从新到旧）
const sortedYears = Object.keys(eventLogsByYear).sort((a, b) => Number(b) - Number(a));
---

<Layout title='活动讯息'>
  <Container class='max-w-[1600px]'>
    <Sectionhead>
      <Fragment slot='title'>活动讯息</Fragment>
      <Fragment slot='desc'>我们的最新活动与讯息，欢迎报名参与。</Fragment>
    </Sectionhead>

    <!-- 标签切换 -->
    <div class='mt-8 border-b border-gray-200'>
      <nav class='flex' aria-label='Tabs'>
        <button class='flex-1 tab-button active' data-tab='recent'
          >活动讯息</button
        >
        <button class='flex-1 tab-button' data-tab='past'>活动记录</button>
      </nav>
    </div>

    <!-- 内容区域 -->
    <div class='mt-8'>
      <div id='recent-tab' class='tab-content active'>
        <div id="events-container">
          {
            initialMonths.map((month, monthIndex) => (
              <div class='mb-16 month-section'>
                <h2 class='pl-3 mb-6 text-2xl font-bold text-gray-800 border-l-4 border-blue-500'>
                  {month}
                </h2>
                <ul class='space-y-16'>
                  {eventsByMonth[month].map((eventEntry, index) => (
                    <li class='transition-shadow rounded-lg hover:shadow-lg bg-slate-100 hover:bg-blue-50'>
                      <a href={`/events/${eventEntry.slug}`} class='block p-6'>
                        <div
                          class={`grid items-center gap-8 ${index % 2 === 0 ? 'md:grid-cols-[1fr_1.5fr]' : 'md:grid-cols-[1.5fr_1fr] md:grid-flow-dense'}`}>
                          <div
                            class={`${index % 2 === 1 ? 'md:col-start-2' : ''}`}>
                            <div class='lazy-image-container flex justify-center items-center rounded-md w-full h-[290px]'>
                              <Picture
                                src={eventEntry.data.image.src}
                                alt={eventEntry.data.image.alt || 'Event image'}
                                class='object-cover object-center w-full h-full rounded-md'
                                loading='lazy'
                                decoding='async'
                                widths={[320, 800]}
                                sizes='(max-width: 768px) 100vw, 50vw'
                                width={800}
                                height={320}
                                inferSize={false}
                                style='aspect-ratio: 5/3; height: 100%; width: 100%;'
                              />
                            </div>
                          </div>

                          <div
                            class={`${index % 2 === 1 ? 'md:col-start-1 text-right' : 'text-left'} px-4`}>
                            <span class='text-sm font-medium tracking-wider text-blue-400 uppercase'>
                              {eventEntry.data.category}
                            </span>
                            <h3 class='mt-2 text-3xl font-semibold leading-snug tracking-tight'>
                              {eventEntry.data.title}
                            </h3>
                            <p class='mt-4 text-gray-600 line-clamp-3'>
                              {eventEntry.data.excerpt || ''}
                            </p>
                            <div class={`flex gap-2 mt-4 ${index % 2 === 1 ? 'justify-end' : 'justify-start'}`}>
                              <span class='text-gray-400'>
                                {eventEntry.data.author}
                              </span>
                              <span class='text-gray-400'>•</span>
                              <time
                                class='text-gray-400'
                                datetime={eventEntry.data.publishDate.toISOString()}>
                                {eventEntry.data.publishDate.toLocaleDateString(
                                  'zh-CN',
                                  {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric',
                                  },
                                )}
                              </time>
                            </div>
                          </div>
                        </div>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ))
          }
        </div>

        <!-- 加载更多按钮 -->
        {hasMoreMonths && (
          <div id='load-more-container' class='mt-8 mb-16 text-center'>
            <button
              id='load-more'
              class='px-6 py-3 text-white transition-colors bg-blue-500 rounded-md hover:bg-blue-600'
              data-current-index={initialMonthsCount}>
              加载更多活动讯息
            </button>
          </div>
        )}
      </div>

      <div id='past-tab' class='hidden tab-content'>
        <!-- 活动记录标签页内容 -->
        <div class="relative">
          <!-- 进度条装饰 -->
          <div class="absolute left-1/2 transform -translate-x-1/2 h-full w-1 bg-gradient-to-b from-primary to-blue-200 rounded-full"></div>

          <div class="space-y-8 relative z-10">
            {sortedYears.map((year) => (
              <div class="mb-16">
                <h2 class="relative z-10 inline-block px-6 py-2 mb-10 text-2xl font-bold text-white bg-primary rounded-lg shadow-lg">
                  {year}年
                </h2>

                <div class="space-y-12">
                  {eventLogsByYear[year].map((event, index) => (
                    <div class="relative">
                      <!-- 时间节点装饰 -->
                      <div class="absolute left-1/2 top-0 transform -translate-x-1/2 -translate-y-1/2 w-5 h-5 bg-primary rounded-full border-4 border-white shadow-md"></div>

                      <div class={`grid gap-6 md:gap-12 items-start ${index % 2 === 0 ? 'md:grid-cols-[1fr_1fr]' : 'md:grid-cols-[1fr_1fr] md:grid-flow-dense'}`}>
                        <!-- 左侧内容或右侧内容 -->
                        <div class={`bg-white rounded-xl shadow-md overflow-hidden transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1 ${index % 2 === 1 ? 'md:col-start-1' : ''}`}>
                          <div class="aspect-video overflow-hidden">
                            {event.images && event.images.length > 0 && (
                              <img
                                src={event.images[0].path}
                                alt={event.title}
                                class="w-full h-full object-cover transition-transform duration-700 hover:scale-110"
                              />
                            )}
                          </div>
                          <div class="p-5">
                            <time class="text-sm font-medium text-primary">
                              {new Date(event.date).toLocaleDateString('zh-CN', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                              })}
                            </time>
                            <h3 class="mt-2 text-xl font-semibold text-gray-800">{event.title}</h3>
                            <div class="mt-3 space-y-1">
                              {event.text_content && event.text_content.map((text) => (
                                <p class="text-gray-600 text-sm">{text}</p>
                              ))}
                            </div>
                          </div>
                        </div>

                        <!-- 图片网格 - 只在有多张图片时显示 -->
                        <div class={`${index % 2 === 1 ? 'md:col-start-2' : ''} ${event.images && event.images.length <= 1 ? 'hidden md:block' : ''}`}>
                          {event.images && event.images.length > 1 ? (
                            <div class={`grid gap-3 ${event.images.length > 3 ? 'grid-cols-2' : 'grid-cols-1'}`}>
                              {event.images.slice(1, 5).map((image, imgIndex) => (
                                <div class="aspect-square overflow-hidden rounded-lg shadow-md">
                                  <img
                                    src={image.path}
                                    alt={`${event.title} 图片 ${imgIndex + 2}`}
                                    class="w-full h-full object-cover transition-transform duration-500 hover:scale-110"
                                  />
                                </div>
                              ))}
                            </div>
                          ) : (
                            <div class="flex items-center justify-center h-full text-center p-6 bg-blue-50 rounded-xl">
                              <p class="text-primary font-medium italic">{event.title}</p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </Container>
</Layout>

<style>
  .tab-button {
    @apply py-4 px-1 text-center border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300;
  }
  .tab-button.active {
    @apply border-blue-500 text-blue-600;
  }
  .tab-content {
    @apply hidden;
  }
  .tab-content.active {
    @apply block;
  }
  .lazy-image-container {
    min-height: 100px;
    background-color: #f3f4f6;
  }
</style>

<script define:vars={{ sortedMonthsJSON, eventsByMonthJSON }}>
  // 标签切换逻辑
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-button')
    const tabContents = document.querySelectorAll('.tab-content')

    // 解析服务器端传递的数据
    const sortedMonths = JSON.parse(sortedMonthsJSON);
    const eventsByMonth = JSON.parse(eventsByMonthJSON);

    // 图片懒加载实现
    const setupIntersectionObserver = () => {
      const imageContainers = document.querySelectorAll('.lazy-image-container');

      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const container = entry.target;
            const image = container.querySelector('img');

            if (image && image.dataset.src) {
              image.src = image.dataset.src;
              image.removeAttribute('data-src');
            }

            // 停止观察已加载的图片
            observer.unobserve(container);
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.1
      });

      imageContainers.forEach(container => {
        imageObserver.observe(container);
      });
    }

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.dataset.tab

        // 更新按钮状态
        tabButtons.forEach(btn => btn.classList.remove('active'))
        button.classList.add('active')

        // 更新内容显示
        tabContents.forEach(content => content.classList.remove('active'))
        const tabContent = document.getElementById(`${tabId}-tab`)
        if (tabContent) {
          tabContent.classList.add('active')

          // 当切换到tab时重新检查需要懒加载的图片
          setupIntersectionObserver();
        }
      })
    })

    // 初始化图片懒加载
    setupIntersectionObserver();

    // 活动讯息加载更多功能
    const loadMoreBtn = document.getElementById('load-more');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', () => {
        const eventsContainer = document.getElementById('events-container');
        const currentIndex = parseInt(loadMoreBtn.getAttribute('data-current-index') || '3');
        const batchSize = 3; // 每次加载3个月份

        // 加载下一批月份
        for (let i = 0; i < batchSize; i++) {
          const monthIndex = currentIndex + i;
          if (monthIndex < sortedMonths.length) {
            const monthToLoad = sortedMonths[monthIndex];

            if (monthToLoad && eventsByMonth[monthToLoad]) {
              // 创建新的月份区域
              const monthSection = document.createElement('div');
              monthSection.classList.add('mb-16', 'month-section');

              // 添加月份标题
              const monthTitle = document.createElement('h2');
              monthTitle.classList.add('pl-3', 'mb-6', 'text-2xl', 'font-bold', 'text-gray-800', 'border-l-4', 'border-blue-500');
              monthTitle.textContent = monthToLoad;
              monthSection.appendChild(monthTitle);

              // 添加活动列表
              const eventsList = document.createElement('ul');
              eventsList.classList.add('space-y-16');

              // 使用模板字符串构建HTML内容
              eventsList.innerHTML = eventsByMonth[monthToLoad].map((event, index) => `
                <li class='transition-shadow rounded-lg hover:shadow-lg bg-slate-100 hover:bg-blue-50'>
                  <a href="/events/${event.slug}" class='block p-6'>
                    <div class='grid items-center gap-8 ${index % 2 === 0 ? 'md:grid-cols-[1fr_1.5fr]' : 'md:grid-cols-[1.5fr_1fr] md:grid-flow-dense'}'>
                      <div class='${index % 2 === 1 ? 'md:col-start-2' : ''}'>
                        <div class='lazy-image-container flex justify-center items-center rounded-md w-full h-[290px]'>
                          <img
                            src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1 1'%3E%3C/svg%3E"
                            data-src="${event.data.image.src.src || event.data.image.src}"
                            alt="${event.data.image.alt || 'Event image'}"
                            class='object-cover object-center w-full h-full rounded-md'
                            style='aspect-ratio: 5/3; height: 100%; width: 100%;'
                            loading="lazy"
                          />
                        </div>
                      </div>
                      <div class='${index % 2 === 1 ? 'md:col-start-1 text-right' : 'text-left'} px-4'>
                        <span class='text-sm font-medium tracking-wider text-blue-400 uppercase'>
                          ${event.data.category}
                        </span>
                        <h3 class='mt-2 text-3xl font-semibold leading-snug tracking-tight'>
                          ${event.data.title}
                        </h3>
                        <p class='mt-4 text-gray-600 line-clamp-3'>
                          ${event.data.excerpt || ''}
                        </p>
                        <div class='flex gap-2 mt-4 ${index % 2 === 1 ? 'justify-end' : 'justify-start'}'>
                          <span class='text-gray-400'>
                            ${event.data.author}
                          </span>
                          <span class='text-gray-400'>•</span>
                          <time
                            class='text-gray-400'
                            datetime="${new Date(event.data.publishDate).toISOString()}">
                            ${new Date(event.data.publishDate).toLocaleDateString('zh-CN', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric',
                            })}
                          </time>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
              `).join('');

              monthSection.appendChild(eventsList);
              eventsContainer.appendChild(monthSection);
            }
          }
        }

        // 更新当前索引
        const newIndex = currentIndex + batchSize;
        loadMoreBtn.setAttribute('data-current-index', newIndex.toString());

        // 如果已加载所有月份，隐藏按钮
        if (newIndex >= sortedMonths.length) {
          loadMoreBtn.style.display = 'none';
        }

        // 为新加载的图片设置懒加载
        setupIntersectionObserver();
      });
    }
  })
</script>
