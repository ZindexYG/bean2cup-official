---
// 图片查看器不需要传入任何初始props，它通过JS动态加载内容
---

<!-- 图片查看器模态框 -->
<div id="image-viewer" class="fixed inset-0 z-50 bg-black/90 hidden flex-col justify-center items-center opacity-0 transition-opacity duration-300">
  <button id="close-viewer" class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300 z-50">×</button>

  <!-- 图片导航按钮 -->
  <button id="prev-image" class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/30 text-white p-2 rounded-full hover:bg-black/50">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
    </svg>
  </button>

  <button id="next-image" class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/30 text-white p-2 rounded-full hover:bg-black/50">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
      <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
    </svg>
  </button>

  <div class="w-full h-full max-w-7xl max-h-[80vh] flex items-center justify-center p-4">
    <img id="viewer-image" src="" alt="" class="max-h-full max-w-full object-contain" />
  </div>

  <!-- 图片信息面板 -->
  <div id="image-info" class="w-full max-w-4xl bg-white/10 backdrop-blur-md text-white p-4 rounded-lg mt-4">
    <h3 id="viewer-title" class="text-xl font-bold"></h3>
    <div class="flex justify-between items-center my-2">
      <time id="viewer-date" class="text-sm"></time>
      <span id="image-counter" class="text-sm"></span>
    </div>
    <p id="viewer-desc" class="text-sm opacity-80"></p>
  </div>
</div>

<style>
  /* 图片查看器动画 */
  #image-viewer.visible {
    @apply flex opacity-100;
  }
</style>

<script>
  // 图片查看器功能
  const initImageViewer = () => {
    const imageViewer = document.getElementById('image-viewer');
    const viewerImage = document.getElementById('viewer-image');
    const viewerTitle = document.getElementById('viewer-title');
    const viewerDate = document.getElementById('viewer-date');
    const viewerDesc = document.getElementById('viewer-desc');
    const imageCounter = document.getElementById('image-counter');
    const closeBtn = document.getElementById('close-viewer');
    const prevBtn = document.getElementById('prev-image');
    const nextBtn = document.getElementById('next-image');

    let currentImageIndex = 0;
    let galleryImages = [];

    // 收集所有图片
    function collectGalleryImages() {
      galleryImages = Array.from(document.querySelectorAll('.gallery-image'));
    }

    // 打开图片查看器
    function openImageViewer(index) {
      if (galleryImages.length === 0) return;

      currentImageIndex = index;
      const img = galleryImages[currentImageIndex];

      viewerImage.src = img.getAttribute('data-full') || img.src;
      viewerImage.alt = img.alt || '';
      viewerTitle.textContent = img.getAttribute('data-title') || '';
      viewerDate.textContent = img.getAttribute('data-date') || '';
      viewerDesc.textContent = img.getAttribute('data-desc') || '';
      imageCounter.textContent = `${currentImageIndex + 1} / ${galleryImages.length}`;

      // 显示查看器
      imageViewer.classList.remove('hidden');
      setTimeout(() => {
        imageViewer.classList.add('visible');
      }, 10);

      // 禁用背景滚动
      document.body.style.overflow = 'hidden';
    }

    // 关闭图片查看器
    function closeImageViewer() {
      imageViewer.classList.remove('visible');
      setTimeout(() => {
        imageViewer.classList.add('hidden');
      }, 300);

      // 恢复背景滚动
      document.body.style.overflow = '';
    }

    // 下一张图片
    function nextImage() {
      currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
      openImageViewer(currentImageIndex);
    }

    // 上一张图片
    function prevImage() {
      currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
      openImageViewer(currentImageIndex);
    }

    // 初始化
    function init() {
      collectGalleryImages();

      // 为所有图片添加点击事件
      galleryImages.forEach((img, index) => {
        img.addEventListener('click', (e) => {
          e.preventDefault();
          openImageViewer(index);
        });
      });

      // 按钮事件
      closeBtn.addEventListener('click', closeImageViewer);
      nextBtn.addEventListener('click', nextImage);
      prevBtn.addEventListener('click', prevImage);

      // 键盘导航
      document.addEventListener('keydown', (e) => {
        if (imageViewer.classList.contains('visible')) {
          if (e.key === 'Escape') {
            closeImageViewer();
          } else if (e.key === 'ArrowRight') {
            nextImage();
          } else if (e.key === 'ArrowLeft') {
            prevImage();
          }
        }
      });

      // 点击背景关闭图片查看器
      imageViewer.addEventListener('click', (e) => {
        if (e.target === imageViewer) {
          closeImageViewer();
        }
      });
    }

    return { init, collectGalleryImages };
  };

  // 导出到全局以便其他组件可以调用刷新方法
  document.addEventListener('DOMContentLoaded', () => {
    const imageViewer = initImageViewer();
    imageViewer.init();

    // 添加到全局对象，以便其他组件可以调用
    window.imageViewer = imageViewer;
  });
</script>
