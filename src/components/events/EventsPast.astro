---
import ImageViewer from "../ui/ImageViewer.astro";
import GalleryImage from "../ui/GalleryImage.astro";

// 接收父组件传入的数据
const { sortedYears, eventLogsByYear } = Astro.props;

// 反转年份排序 - 从旧到新
const chronologicalYears = [...sortedYears]

// 对每个年份内的事件进行反向排序 - 从旧到新
const chronologicalEventsByYear = {};
chronologicalYears.forEach(year => {
  // 对每个年份内的事件按日期从旧到新排序
  chronologicalEventsByYear[year] = [...eventLogsByYear[year]].sort((a, b) => {
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);
    return dateB.getTime() - dateA.getTime(); // 从旧到新排序
  });
});
---

<!-- 活动记录标签页内容 -->
<div class="relative timeline-container">
  <!-- 年份导航栏 -->
  <div id="year-nav" class="sticky top-0 z-30 flex justify-center items-center py-3 bg-white/80 backdrop-blur-md w-full">
    <div class="flex space-x-4 overflow-x-auto px-4 scrollbar-thin scrollbar-thumb-primary scrollbar-track-gray-100">
      {chronologicalYears.map((year) => (
        <button
          class="year-nav-btn px-4 py-2 text-gray-600 rounded-full hover:bg-blue-50 transition-all"
          data-year={year}
        >
          {year}年
        </button>
      ))}
    </div>
  </div>

  <!-- 整个时间线容器 -->
  <div class="timeline-content-wrapper relative">
    <!-- 进度条装饰 - 修改为不包含"未来"区域 -->
    <div id="timeline-progress" class="absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-gray-200 to-gray-200 rounded-full">
      <div id="progress-indicator" class="w-full bg-gradient-to-b from-primary to-blue-400 rounded-full" style="height: 0%;"></div>
    </div>

    <div class="space-y-24 relative z-10 pt-6">
      {chronologicalYears.map((year) => (
        <div id={`year-${year}`} class="year-section mb-32" data-year={year}>
          <h2 class="relative z-10 flex justify-center mb-16">
            <span class="inline-block px-8 py-3 text-2xl font-bold text-white bg-primary rounded-lg shadow-lg transform transition-all duration-300">
              {year}年
            </span>
          </h2>

          <div class="space-y-24">
            {chronologicalEventsByYear[year].map((event, index) => (
              <div class="relative event-item" data-event-id={`event-${year}-${index}`}>
                <!-- 时间节点装饰 -->
                <div class="absolute left-1/2 top-0 transform -translate-x-1/2 -translate-y-1/2 w-5 h-5 bg-primary rounded-full border-4 border-white shadow-md"></div>

                <div class={`grid gap-6 md:gap-12 items-start ${index % 2 === 0 ? 'md:grid-cols-[1fr_1fr]' : 'md:grid-cols-[1fr_1fr] md:grid-flow-dense'}`}>
                  <!-- 左侧内容 -->
                  <div class={`bg-white rounded-xl shadow-md overflow-hidden transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1 ${index % 2 === 1 ? 'md:col-start-1' : ''}`}>
                    <div class="aspect-video overflow-hidden">
                      {event.images && event.images.length > 0 && (
                        <GalleryImage
                          src={event.images[0].path}
                          alt={event.title}
                          title={event.title}
                          date={new Date(event.date).toLocaleDateString('zh-CN', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                          })}
                          description={event.text_content ? event.text_content.join(' ') : ''}
                          className="w-full h-full object-cover transition-transform duration-700 hover:scale-110"
                        />
                      )}
                    </div>
                    <div class="p-5">
                      <time class="text-sm font-medium text-primary">
                        {new Date(event.date).toLocaleDateString('zh-CN', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                        })}
                      </time>
                      <h3 class="mt-2 text-xl font-semibold text-gray-800">{event.title}</h3>
                      <div class="mt-3 space-y-1">
                        {event.text_content && event.text_content.map((text) => (
                          <p class="text-gray-600 text-sm">{text}</p>
                        ))}
                      </div>
                    </div>
                  </div>

                  <!-- 图片网格 - 右侧 -->
                  <div class={`${index % 2 === 1 ? 'md:col-start-2' : ''} ${event.images && event.images.length <= 1 ? 'hidden md:block' : ''}`}>
                    {event.images && event.images.length > 1 ? (
                      <div class="grid grid-cols-2 gap-3 h-full">
                        {event.images.slice(1, 5).map((image, imgIndex) => (
                          <div class={`${event.images.length === 2 || (event.images.length === 3 && imgIndex === 0) ? 'col-span-2' : ''} aspect-square overflow-hidden rounded-lg shadow-md`}>
                            <GalleryImage
                              src={image.path}
                              alt={`${event.title} 图片 ${imgIndex + 2}`}
                              title={event.title}
                              date={new Date(event.date).toLocaleDateString('zh-CN', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                              })}
                              description={event.text_content ? event.text_content.join(' ') : ''}
                            />
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div class="flex items-center justify-center h-full text-center p-6 bg-blue-50 rounded-xl">
                        <p class="text-primary font-medium italic">{event.title}</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}

      <!-- 添加"未来"区域 -->
      <div class="relative mt-20 pt-12 future-section">
        <!-- 未来节点装饰 - 连接历史与未来的装饰点 -->
        <div class="absolute left-1/2 top-0 transform -translate-x-1/2 -translate-y-1/2 w-7 h-7 bg-gradient-to-r from-primary to-blue-400 rounded-full border-4 border-white shadow-lg flex items-center justify-center">
          <div class="w-2 h-2 bg-white rounded-full"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 引入图片查看器组件 -->
<ImageViewer />

<style>
  /* 定制滚动条 */
  .scrollbar-thin::-webkit-scrollbar {
    height: 6px;
  }

  .scrollbar-thumb-primary::-webkit-scrollbar-thumb {
    background-color: var(--color-primary, #3b82f6);
    border-radius: 3px;
  }

  .scrollbar-track-gray-100::-webkit-scrollbar-track {
    background-color: #f3f4f6;
  }

  /* 活跃的年份按钮 */
  .year-nav-btn.active {
    @apply bg-primary text-white font-medium;
  }

  /* 确保 sticky 导航栏正常工作 */
  #year-nav {
    position: sticky;
    top: 0;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    z-index: 30;
  }

  /* 进度条样式 */
  #timeline-progress {
    height: calc(100% - 200px); /* 减去底部空间，不包含未来区域 */
  }

  /* 平滑过渡 */
  html {
    scroll-behavior: smooth;
  }

  /* 给未来部分添加风格区分 */
  .future-section {
    position: relative;
    padding-top: 2rem;
    border-top: 1px dashed #e5e7eb;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // 时间线进度条更新 - 修改为仅作用于历史部分
    function updateTimelineProgress() {
      const container = document.querySelector('.timeline-content-wrapper');
      if (!container) return;

      const scrollTop = window.scrollY;
      const containerTop = container.getBoundingClientRect().top + scrollTop;
      const containerHeight = container.scrollHeight;
      const windowHeight = window.innerHeight;

      // 计算相对于容器中点的滚动位置
      const scrollMiddle = scrollTop + windowHeight / 2;

      // 计算进度百分比，滚动到中间就是50%
      const progressPercentage = ((scrollMiddle - containerTop) / containerHeight) * 100;

      // 限制在0-100%之间
      const boundedProgress = Math.max(0, Math.min(100, progressPercentage));

      const progressIndicator = document.getElementById('progress-indicator');
      if (progressIndicator) {
        progressIndicator.style.height = `${boundedProgress}%`;
      }
    }

    // 监听滚动更新进度条
    window.addEventListener('scroll', updateTimelineProgress);

    // 初始化进度条
    updateTimelineProgress();

    // 年份导航与固定年份标题
    const yearSections = document.querySelectorAll('.year-section');
    const yearNavBtns = document.querySelectorAll('.year-nav-btn');
    const yearNav = document.getElementById('year-nav');
    const yearNavHeight = yearNav ? yearNav.offsetHeight : 0;

    // 设置导航栏最初的活跃项
    if (yearNavBtns.length > 0) {
      yearNavBtns[0].classList.add('active');
    }

    // 点击年份导航按钮滚动到对应区域
    yearNavBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const targetYear = btn.getAttribute('data-year');
        const targetSection = document.getElementById(`year-${targetYear}`);

        if (targetSection) {
          // 滚动到目标位置，考虑导航栏高度
          window.scrollTo({
            top: targetSection.offsetTop - yearNavHeight - 20,
            behavior: 'smooth'
          });
        }
      });
    });

    // 监听滚动以更新活跃年份 - 改进版
    function updateActiveYear() {
      if (!yearSections.length) return;

      // 获取固定导航栏的高度
      const navOffset = yearNavHeight + 20; // 额外的偏移量

      // 查找当前滚动位置最接近的年份区块
      let currentSection: Element | null = null;

      // 优先检查：如果某个区块的顶部刚好在视窗顶部下方（考虑导航栏高度）
      for (const section of yearSections) {
        const rect = section.getBoundingClientRect();
        if (rect.top <= navOffset && rect.bottom > navOffset) {
          currentSection = section;
          break;
        }
      }

      // 如果没有找到符合条件的区块，使用备用方法
      if (!currentSection) {
        // 备用方法：查找距离视窗顶部最近的区块
        let closestDistance = Infinity;

        yearSections.forEach(section => {
          const rect = section.getBoundingClientRect();
          const distance = Math.abs(rect.top - navOffset);

          if (distance < closestDistance) {
            closestDistance = distance;
            currentSection = section;
          }
        });
      }

      if (currentSection) {
        const activeYear = currentSection.getAttribute('data-year');

        // 更新活跃年份按钮
        yearNavBtns.forEach(btn => {
          if (btn.getAttribute('data-year') === activeYear) {
            btn.classList.add('active');

            // 确保活跃按钮在导航栏中可见（水平滚动）
            const btnRect = btn.getBoundingClientRect();

            // 添加null检查
            if (yearNav) {
              const navScrollContainer = yearNav.querySelector('div');
              if (navScrollContainer) {
                const navRect = navScrollContainer.getBoundingClientRect();

                if (btnRect.left < navRect.left) {
                  navScrollContainer.scrollLeft += btnRect.left - navRect.left - 16;
                } else if (btnRect.right > navRect.right) {
                  navScrollContainer.scrollLeft += btnRect.right - navRect.right + 16;
                }
              }
            }
          } else {
            btn.classList.remove('active');
          }
        });
      }
    }

    // 使用防抖函数处理滚动事件
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(updateActiveYear, 50);
    });

    // 初始化
    updateActiveYear();

    // 确保页面加载时显示所有年份的数据
    window.addEventListener('load', () => {
      // 强制重新计算布局，确保所有内容都正确显示
      yearSections.forEach(section => {
        (section as HTMLElement).style.display = 'block';
      });
      updateActiveYear();
      updateTimelineProgress();
    });

    // 确保图片加载后，刷新图片查看器图片列表
    if (window.imageViewer) {
      window.imageViewer.collectGalleryImages();
    }

    // 手动实现吸顶效果
    function handleStickyNav() {
      const yearNav = document.getElementById('year-nav');
      const timelineContainer = document.querySelector('.timeline-container');

      if (!yearNav || !timelineContainer) return;

      const containerRect = timelineContainer.getBoundingClientRect();
      const navHeight = yearNav.offsetHeight;

      if (containerRect.top <= 0 && containerRect.bottom > navHeight) {
        // 应该吸顶
        yearNav.style.position = 'fixed';
        yearNav.style.top = '0';
        yearNav.style.left = '0';
        yearNav.style.right = '0';
        yearNav.style.width = '100%';

        // 添加占位元素避免布局跳动
        if (!yearNav.nextElementSibling?.classList.contains('nav-placeholder')) {
          const placeholder = document.createElement('div');
          placeholder.className = 'nav-placeholder';
          placeholder.style.height = `${navHeight}px`;
          yearNav.parentNode.insertBefore(placeholder, yearNav.nextSibling);
        }
      } else {
        // 恢复正常定位
        yearNav.style.position = 'sticky';
        yearNav.style.top = '0';
        yearNav.style.left = '';
        yearNav.style.right = '';
        yearNav.style.width = '';

        // 移除占位元素
        const placeholder = document.querySelector('.nav-placeholder');
        if (placeholder) {
          placeholder.remove();
        }
      }
    }

    // 监听滚动事件
    let stickyTimeout;
    window.addEventListener('scroll', () => {
      clearTimeout(stickyTimeout);
      stickyTimeout = setTimeout(handleStickyNav, 10);
    });

    // 标签切换时重新初始化
    document.addEventListener('tabChanged', (event) => {
      const customEvent = event as CustomEvent;
      if (customEvent.detail && customEvent.detail.tabId === 'panel-past') {
        setTimeout(() => {
          handleStickyNav();
          updateActiveYear();
          updateTimelineProgress();
        }, 400);
      }
    });
  });
</script>
